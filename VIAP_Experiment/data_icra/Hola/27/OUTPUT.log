Program Body
{
  int _1_ASSUME;
  _1_ASSUME = 0;
  int _1_PROVE[100000][100000];
  int i;
  int k;
  int n;
  int l;
  n = __VERIFIER_nondet_int();
  l = __VERIFIER_nondet_int();
  _1_ASSUME = l > 0;
  k = 1;
  while (k < n)
  {
    i = l;
    while (i < n)
    {
      i = i + 1;
    }

    i = l;
    while (i < n)
    {
      _1_PROVE[i][k] = 1 <= k;
      i = i + 1;
    }

    k = k + 1;
  }

}

Function Name:
main
Return Type:
void
Input Variables:
{}
Local Variables:
{ i:int k:int _1_PROVE:array l:int n:int _1_ASSUME:int}


Output in normal notation:
1. Frame axioms:

2. Output equations:
i1 = i9(_N3)
k1 = (_N3+1)
l1 = __VERIFIER_nondet_int3
n1 = __VERIFIER_nondet_int2

3. Other axioms:
(_N1(_n3)>=(-(__VERIFIER_nondet_int3)+__VERIFIER_nondet_int2))
(_n1<_N1(_n3)) -> ((_n1+__VERIFIER_nondet_int3)<__VERIFIER_nondet_int2)
(_N2(_n3)>=(-(__VERIFIER_nondet_int3)+__VERIFIER_nondet_int2))
(_n2<_N2(_n3)) -> ((_n2+__VERIFIER_nondet_int3)<__VERIFIER_nondet_int2)
i9((_n3+1)) = (_N2(_n3)+__VERIFIER_nondet_int3)
i9(0) = i
(_N3>=(-(1)+__VERIFIER_nondet_int2))
(_n3<_N3) -> ((_n3+1)<__VERIFIER_nondet_int2)

4. Assumption :
(__VERIFIER_nondet_int3>0)

5. Assertion :
(1<=(_n3+1))
Strategy applied 1
VIAP_STANDARD_OUTPUT_True

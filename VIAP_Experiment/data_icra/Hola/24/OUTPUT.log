Program Body
{
  int _1_PROVE[100000][100000][100000];
  int i;
  int j;
  int k;
  int n;
  n = __VERIFIER_nondet_int();
  i = 0;
  while (i < n)
  {
    j = i;
    while (j < n)
    {
      k = j;
      while (k < n)
      {
        _1_PROVE[i][k][j] = k >= i;
        k = k + 1;
      }

      j = j + 1;
    }

    i = i + 1;
  }

}

Function Name:
main
Return Type:
int
Input Variables:
{}
Local Variables:
{ i:int n:int k:int _1_PROVE:array j:int}


Output in normal notation:
1. Frame axioms:

2. Output equations:
i1 = (_N3+0)
k1 = k8(_N3)
j1 = j8(_N3)
n1 = __VERIFIER_nondet_int2

3. Other axioms:
(_N1(_n2,_n3)>=(-((_n2+(_n3+0)))+__VERIFIER_nondet_int2))
(_n1<_N1(_n2,_n3)) -> ((_n1+(_n2+(_n3+0)))<__VERIFIER_nondet_int2)
k5((_n2+1),_n3) = (_N1(_n2,_n3)+(_n2+(_n3+0)))
k5(0,_n3) = k8(_n3)
(_N2(_n3)>=(-((_n3+0))+__VERIFIER_nondet_int2))
(_n2<_N2(_n3)) -> ((_n2+(_n3+0))<__VERIFIER_nondet_int2)
k8((_n3+1)) = k5(_N2(_n3),_n3)
j8((_n3+1)) = (_N2(_n3)+(_n3+0))
k8(0) = k
j8(0) = j
(_N3>=(-(0)+__VERIFIER_nondet_int2))
(_n3<_N3) -> ((_n3+0)<__VERIFIER_nondet_int2)

4. Assumption :

5. Assertion :
((_n1+(_n2+(_n3+0)))>=(_n3+0))
Strategy applied 1
VIAP_STANDARD_OUTPUT_True

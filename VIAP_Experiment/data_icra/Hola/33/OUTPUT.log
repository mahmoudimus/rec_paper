Program Body
{
  int _1_PROVE = 0;
  int k;
  k = __VERIFIER_nondet_int();
  int z;
  z = k;
  int x;
  x = 0;
  int y;
  y = 0;
  while (__VERIFIER_nondet_int() > 0)
  {
    int c;
    c = 0;
    while (__VERIFIER_nondet_int() > 0)
    {
      if (z == ((k + y) - c))
      {
        x = x + 1;
        y = y + 1;
        c = c + 1;
      }
      else
      {
        x = x + 1;
        y = y - 1;
        c = c + 1;
      }

    }

    while (__VERIFIER_nondet_int() > 0)
    {
      x = x - 1;
      y = y - 1;
    }

    z = k + y;
  }

  _1_PROVE = x == y;
}

Function Name:
main
Return Type:
int
Input Variables:
{}
Local Variables:
{ c:int k:int _1_PROVE:int y:int x:int z:int}

Output in normal notation:
1. Frame axioms:

2. Output equations:
y1 = y13(_N3)
x1 = x13(_N3)
c1 = c13(_N3)
z1 = z13(_N3)
k1 = __VERIFIER_nondet_int2

3. Other axioms:
y7((_n1+1),_n3) = ite((z13(_n3)==((__VERIFIER_nondet_int2+y7(_n1,_n3))-(_n1+0))),(y7(_n1,_n3)+1),(y7(_n1,_n3)-1))
y7(0,_n3) = y13(_n3)
(0<=-(__VERIFIER_nondet_int3(_N1(_n3),_n3)))
(_n1<_N1(_n3)) -> (__VERIFIER_nondet_int3(_n1,_n3)>0)
(0<=-(__VERIFIER_nondet_int4(_N2(_n3),_n3)))
(_n2<_N2(_n3)) -> (__VERIFIER_nondet_int4(_n2,_n3)>0)
y13((_n3+1)) = (-(_N2(_n3))+y7(_N1(_n3),_n3))
x13((_n3+1)) = (-(_N2(_n3))+(_N1(_n3)+x13(_n3)))
c13((_n3+1)) = (_N1(_n3)+0)
z13((_n3+1)) = (__VERIFIER_nondet_int2+(-(_N2(_n3))+y7(_N1(_n3),_n3)))
y13(0) = 0
x13(0) = 0
c13(0) = c
z13(0) = __VERIFIER_nondet_int2
(0<=-(__VERIFIER_nondet_int5(_N3)))
(_n3<_N3) -> (__VERIFIER_nondet_int5(_n3)>0)

4. Assumption :

5. Assertion :
(x13(_N3)==y13(_N3))
Strategy applied 1

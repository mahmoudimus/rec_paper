import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	p2temp13=Function('p2temp13',IntSort(),IntSort())
	p1i=Int('p1i')
	p1n=Int('p1n')
	p2n1=Int('p2n1')
	p1sum1=Int('p1sum1')
	p2count2_var13=Function('p2count2_var13',IntSort(),IntSort())
	p1sum4=Function('p1sum4',IntSort(),IntSort())
	p2i1=Int('p2i1')
	p2count1_var13=Function('p2count1_var13',IntSort(),IntSort())
	p1i1=Int('p1i1')
	p1cur1=Int('p1cur1')
	p1result1=Int('p1result1')
	p1cur4=Function('p1cur4',IntSort(),IntSort())
	p2count2_var1=Int('p2count2_var1')
	p2n=Int('p2n')
	_N2=Const('_N2',IntSort())
	p2result1=Int('p2result1')
	p2temp=Int('p2temp')
	_N1=Const('_N1',IntSort())
	p2i=Int('p2i')
	p2temp1=Int('p2temp1')
	p1prev1=Int('p1prev1')
	p1prev4=Function('p1prev4',IntSort(),IntSort())
	p2count1_var1=Int('p2count1_var1')
	p1sum=Int('p1sum')
	_n2=Int('_n2')
	_n1=Int('_n1')
	p1n1=Int('p1n1')
	main=Int('main')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",500)
	_s.add(p2n1 == p2n)
	_s.add(p1n1 == p1n)
	_s.add(p1result1 == If(p1n <= 1,1,p1sum4(_N1)))
	_s.add(p1sum1 == If(p1n <= 1,p1sum,p1sum4(_N1)))
	_s.add(p1cur1 == If(p1n <= 1,0,p1cur4(_N1)))
	_s.add(p1i1 == If(p1n <= 1,p1i,_N1 + 2))
	_s.add(p2temp1 == If(p2n <= 1,p2temp,p2temp13(_N2)))
	_s.add(p2i1 == If(p2n <= 1,p2i,_N2 + 2))
	_s.add(p2result1 == If(p2n <= 1,1,p2count2_var13(_N2)))
	_s.add(p2count2_var1 == If(p2n <= 1,1,p2count2_var13(_N2)))
	_s.add(p2count1_var1 == If(p2n <= 1,1,p2count1_var13(_N2)))
	_s.add(p1prev1 == If(p1n <= 1,1,p1prev4(_N1)))
	_s.add(ForAll([_n1],Implies(_n1>=0,p1cur4(_n1 + 1) == p1sum4(_n1))))
	_s.add(ForAll([_n1],Implies(_n1>=0,p1prev4(_n1 + 1) == p1sum4(_n1))))
	_s.add(ForAll([_n1],Implies(_n1>=0,p1sum4(_n1 + 1) == ((p1sum4(_n1))+(p1prev4(_n1))))))
	_s.add(p1cur4(0) == 0)
	_s.add(p1prev4(0) == 1)
	_s.add(p1sum4(0) == 2)
	_s.add(_N1 >= p1n - 2)
	_s.add(ForAll([_n1],Implies(And(_n1 < _N1,_n1>=0),_n1 + 2 < p1n)))
	_s.add(Or(_N1==0,_N1 + 1 < p1n))
	_s.add(ForAll([_n2],Implies(_n2>=0,p2count1_var13(_n2 + 1) == p2count2_var13(_n2))))
	_s.add(ForAll([_n2],Implies(_n2>=0,p2temp13(_n2 + 1) == p2count2_var13(_n2))))
	_s.add(ForAll([_n2],Implies(_n2>=0,p2count2_var13(_n2 + 1) == p2count1_var13(_n2) + p2count2_var13(_n2))))
	_s.add(p2count1_var13(0) == 1)
	_s.add(p2temp13(0) == p2temp)
	_s.add(p2count2_var13(0) == 1)
	_s.add(_N2 >= p2n - 2)
	_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_n2 + 2 < p2n)))
	_s.add(Or(_N2==0,_N2 + 1 < p2n))
	_s.add(_N1>=0)
	_s.add(_N2>=0)
	_s.add(((p1n)==(p2n)))
	_s.add(Not((If((p1n<=1),1,p1sum4(0))==If((p2n<=1),1,p2count2_var13(0)))))

except Exception as e:
	print "Error(Z3Query)"
	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"

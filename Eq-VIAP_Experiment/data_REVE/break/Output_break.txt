Program Body
{
  int break_2_flag;
  break_2_flag = 0;
  int break_1_flag;
  break_1_flag = 0;
  int _1_ASSUME;
  _1_ASSUME = 0;
  int _1_PROVE = 0;
  int p1x;
  int p1i;
  p1i = 0;
  int p2x;
  int p2i;
  p2i = 10;
  _1_ASSUME = p1x == p2x;
  while ((p1i <= 10) && (break_1_flag == 0))
  {
    break_1_flag = 0;
    if (p1i == p1x)
    {
      break_1_flag = 1;
    }

    if (break_1_flag == 0)
    {
      p1i = p1i + 1;
    }

  }

  while ((p2i >= 0) && (break_2_flag == 0))
  {
    break_2_flag = 0;
    if (p2i == (10 - p2x))
    {
      break_2_flag = 1;
    }

    if (break_2_flag == 0)
    {
      p2i = p2i - 1;
    }

  }

  _1_PROVE = p1i == (10 - p2i);
}

Function Name:
main
Return Type:
int
Input Variables:
{}
Local Variables:
{ p1i:int _1_PROVE:int p2i:int p1x:int break_1_flag:int _1_ASSUME:int break_2_flag:int p2x:int}

Output in normal notation:
1. Frame axioms:
p1x1 = p1x
p2x1 = p2x

2. Output equations:
p1i1 = p1i5(_N1)
break_2_flag1 = break_2_flag10(_N2)
p2i1 = p2i10(_N2)
break_1_flag1 = break_1_flag5(_N1)

3. Other axioms:
p1i5((_n1+1)) = ite((ite((p1i5(_n1)==p1x),1,0)==0),(p1i5(_n1)+1),p1i5(_n1))
break_1_flag5((_n1+1)) = ite((p1i5(_n1)==p1x),1,0)
p1i5(0) = 0
break_1_flag5(0) = 0
((p1i5(_N1)>10) or (break_1_flag5(_N1)!=0))
(_n1<_N1) -> ((p1i5(_n1)<=10) and (break_1_flag5(_n1)==0))
break_2_flag10((_n2+1)) = ite((p2i10(_n2)==(10-p2x)),1,0)
p2i10((_n2+1)) = ite((ite((p2i10(_n2)==(10-p2x)),1,0)==0),(p2i10(_n2)-1),p2i10(_n2))
break_2_flag10(0) = 0
p2i10(0) = 10
((p2i10(_N2)<0) or (break_2_flag10(_N2)!=0))
(_n2<_N2) -> ((p2i10(_n2)>=0) and (break_2_flag10(_n2)==0))

4. Assumption :
(p1x==p2x)

5. Assertion :
(p1i5(_N1)==(10-p2i10(_N2)))



Successfully Proved Assertion

Programs are Equivalent


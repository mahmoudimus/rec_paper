Program Body
{
  int _1_ASSUME;
  _1_ASSUME = 0;
  int _1_PROVE = 0;
  int p1n;
  int p1i;
  p1i = 0;
  int p1x;
  p1x = 0;
  int p2n;
  int p2j;
  p2j = 1;
  int p2x;
  p2x = 0;
  _1_ASSUME = p1n == p2n;
  while (p1i <= p1n)
  {
    p1x = p1x + p1i;
    p1i = p1i + 1;
  }

  while (p2j <= p2n)
  {
    p2x = p2x + p2j;
    p2j = p2j + 1;
  }

  _1_PROVE = p1x == p2x;
}

Function Name:
main
Return Type:
int
Input Variables:
{}
Local Variables:
{ p2n:int p1i:int _1_PROVE:int p1n:int p2j:int p1x:int _1_ASSUME:int p2x:int}

Output in normal notation:
1. Frame axioms:
p2n1 = p2n
p1n1 = p1n

2. Output equations:
p1x1 = ((((((2*_N1)*0)-_N1)+(2*0))+(_N1**2))/2)
p1i1 = (_N1+0)
p2x1 = ((((((2*_N2)*1)-_N2)+(2*0))+(_N2**2))/2)
p2j1 = (_N2+1)

3. Other axioms:
((_N1+0)>p1n)
(_n1<_N1) -> ((_n1+0)<=p1n)
((_N2+1)>p2n)
(_n2<_N2) -> ((_n2+1)<=p2n)

4. Assumption :
(p1n==p2n)

5. Assertion :
(((((((2*_N1)*0)-_N1)+(2*0))+(_N1**2))/2)==((((((2*_N2)*1)-_N2)+(2*0))+(_N2**2))/2))



Successfully Proved Assertion

Programs are Equivalent
